entity fifo_bit is

Port (enr: in STD LOGIC:

	enw :in STD LOGIC:

	dataout: out STD LOGIC VECTOR (3 downto 0);

	datain: in STD LOGIC VECTOR (3 downto 0);

	empty: out STD LOGIC,

	full :out STD LOGIC:

	clk: in STD LOGIC);

end fifo_bit;

architecture Behavioral of fifo_bit is

type memory type is array(0 to 7) of std_logic_vector(3 downto 0); 
signal memory: memory type;

signal readptr writeptr : std_logic_vector(3 downto 0):="0000";

begin

	process (clk)

	begin 
		if(clk'event and clk = '1' and enw = '1') then 
			memory (conv_integer(writeptr)) <= datain; 
			writeptr<= writeptr = '1';
		end if;

		if (clk'event and clk ='1' and enr ='1') then
			dataout <= memory (conv_integer (readptr));
			readptr<= readptr + '1';
		end if;

		if (readptr "1000") then
			empty<='1';
		else
	
			empty<='0'; 
	
		end if;

		if (writeptr -"1000") then

			full<='1';

		else
			full<='0';

		end if; 
	end process;

end Behavioral;



TEST BENCH

stim_proc: process
begin

	enw<='1';
	enr<='0';

	datain<-"0001"; 
	wait for 10 ns; 

	datain<="0010"; 
	wait for 10 ns; 

	datain<="0100"; 
	wait for 10 ns; 

	datain<="1000"; 
	wait for 10 ns; 

	datain<="0011"; 
	wait for 10 ns; 

	datain<="0111"; 
	wait for 10 ns; 

	datain<="1111"; 
	wait for 10 ns; 

	datain<="0000"; 
	wait for 10 ns;

	enw<='0';
	enr<='1';
	wait for 80 ns;

end process;

END;